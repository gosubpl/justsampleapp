http://maven-repository.com/artifact/im.mange/driveby_2.11
0.3.24

In / in -> factory of drivers

use like that

val page = in.loggedInToDoSomething() // now page is a driver

page.clickAdd().accountId(10).setLimit(50).clickSave()

page.assertLimitErrorMessage("kaboom")

driver does not have to have anything in common with the standard driver, it just uses the browser logic to drive the test, like below:

clickAdd() = { assert(ElementVisible(Id(addNew))); click(Id(addNew)); assert(ElementVisible(Id(newAdded))) }
accountId(key: Int) = ... enter(Id(...))) etc.

assertSth(m: String) = assert(TextEquals(Id(errorMessageId(someAccountTextBox)), m))

trait MockitoHelper { // much like standard MockitoSugar in scalaTest
	implicit class Stubbed[T](c: => T) {
		def returns(t: T) {
			when(c).thenReturn(t)
		}

		def throws[E <: Throwable](t: E) {
			when(c).thenThrow(t)
		}
	}

	def once() = times(1)

	def classOf[T : ClassTag] : Class[T] = classTag[T].runtimeClass.asInstanceOf[Class[T]]

	def mock[T : ClassTag] : T = mockitoMock(classOf[T])

	def mock[T <: AnyRef : ClassTag](defaultAnswer: Answer[_]) : T = mockitoMock(classOf[T], defaultAnswer)

	def isEq[T](v: T) = Matchers.eq(v)

	def any[T : ClassTag] = Matchers.any[T]()
}
